#!/usr/bin/env python2

import argparse
import random
import numpy as np


# Parse arguments.  You should not need to modify this.
parser = argparse.ArgumentParser()
parser.add_argument("grammar", help="path to grammar file")
parser.add_argument("count", type=int, help="number of sentences to generate", nargs='?', default=1)
parser.add_argument("-t", "--tree", action='store_true', help="pretty-print tree form instead of printing sentence")
parser.add_argument("--seed", type=int, default=0, help="RNG seed")
args = parser.parse_args()

# Here's how to access the args.  (You won't print them in your actual program.)
# print ('path to grammar file:', args.grammar)
# print ('count:', args.count)
# print ('print tree?', args.tree)
# print ('RNG seed:', args.seed)






# Create a random generator.
rng=random.Random(args.seed)

#########################################
### function defs  ######################
#########################################
def wchoices(population,weights):
    '''
    chooses an element out of list population with relative probability as defined by weights.
    population - list
    weights - list of same length, with relative weight per entry
    returns: element out of population
    '''
    cumsum=[0]
    for w in weights:
        cumsum.append(w+cumsum[len(cumsum)-1])
    
    cumsum_vec= np.array(cumsum)
    point=rng.uniform(0,cumsum[len(cumsum)-1])
    ind_leq_vec=(cumsum_vec<=point)
    c=int(np.sum(np.ones(len(population)+1)[ind_leq_vec])-1)
    return [population[c]]

def is_number(s):
    '''
    returns True if s is a number. False otherwise
    '''
    try:
        float(s)
        return True
    except ValueError:
        return False

def filterline(line,verbose=False):
    '''
    line - string reperesenting a line from a 'grammar' formatted file
    parses the line: ignoring if does not contain a grammar rule otherwise extracting the rule:
    weight, left hand side (LHS),right hand side (RHS).
    if verbose=True prints error messages if encountered
    
    returns:
      * None if format error encountered
      * empty tuple if line does not contain a rule line
      * tuple (weight,LHS,RHS) type (float,string, list of strings)
    '''
    slist=line.split()
    if len(slist)>0:
        if is_number(slist[0]): 			#grammer rules iff start with a wieght.
            s_comments_removed=line.split('#')[0] 	# remove comments
            slist=s_comments_removed.split()
            L=len(slist) 				# note that L > 2
    
            weight=slist[0] 				#note that name re-use is adecuate 
							#in this case as slist is identical 
							#apart from removed comment section
            try:
                LHS=slist[1]
            except:
                if verbose:
                    print('error reading grammar line: improper format')
                return None
            if L==3: 					#RHS is kept as a list of strings.     
                RHS=[slist[2]] 				# if L==3 it means that RHS contains one string. i.e. len(RHS)=1
                if not(RHS):
                    if verbose:
                        print('error reading grammar line: RHS is empty')
                    return None					
            else:
                RHS=slist[2:]
            return (weight,LHS,RHS)
        else:
            return ()
    else:
        return ()


    
def read_grammar(filename):
    '''
    read grammar file.
    retruns: rule_dictionary,weight_dictionary
     * rule_dictionary: dictionary of the form {LHS:[RHS1,RHS2,...]} 
       where LHS is a unique string key corresponding to the left hand side 
       of a rule as defined in the grammar file.
     * weight_dictionary: dictionary of the same structure {LHS:[weight RHS1, weight RHS2,...]}
    '''
    with open(filename,'r') as grm:
        rule_dictionary={} 				#holds grammar rules
        weight_dictionary={} 				#hold wieghts associated 
							#with corresponding rules
        for line in grm:
            retval=filterline(line)
            if retval:
                (weight,LHS,RHS)=retval
                RHS_rules_list=rule_dictionary.get(LHS,False)
                RHS_weight_list=weight_dictionary.get(LHS,False)

                if not(RHS_rules_list):
                    rule_dictionary[LHS]=[RHS]
                    weight_dictionary[LHS]=[float(weight)]
                else:
                    RHS_rules_list.append(RHS)
                    RHS_weight_list.append(float(weight))
            else:
                continue
        return rule_dictionary,weight_dictionary
    
def rule_select(LHS,rule_dictionary,weight_dictionary,term_symbol=None):
    '''
    receives a LHS (string) and selects, randomly, a RHS row vector 
    out of matrix possible RHS expansions - as defined in rule_dictionary {LHS:[RHS1,RHS2,...]}.
    random selection is relatively weighted according to the relative weights of all 
    RHS possible expansions for given LHS - as defined in weight_dictionary {LHS:[weight RHS1, weight RHS2,...]}.
    
    return value: selected RHS vector (list of strings) or term_symbol indicating the requested LHS was terminal.
    '''
    RHS_list=rule_dictionary.get(LHS,term_symbol) 	# if no such LHS is found it means it is terminal
    if RHS_list==term_symbol:
        return term_symbol
    
    weight_list=weight_dictionary.get(LHS)
    #choice=rng.choices(RHS_list,weight_list) 		# supported in python >2.7
    choice=wchoices(RHS_list,weight_list)

    return choice

def isterminal(LHS,rule_dictionary,weight_dictionary,term_symbol=None):
    '''
    returns term_symbol if LHS corresponds to a terminal symbol in rule_dictionary
    '''
    retval=rule_select(LHS,rule_dictionary,weight_dictionary,term_symbol)
    if retval==term_symbol:
        return True
    else:
        return False



def rule_expantion_step(LHS,rule_dictionary,weight_dictionary,disp_tree=False,term_symbol=None):
    '''
    inputs:
     * LHS: left hand side to be (randomly) expanded at current step.
     * rule_dictionary: dictionary of the form {LHS:[RHS1,RHS2,...]} 
       where LHS is a unique string key corresponding to the left hand side 
       of a rule as defined in the grammar file.
     * weight_dictionary: dictionary of the same structure {LHS:[weight RHS1, weight RHS2,...]}
     * disp_tree: bool, if true output tree string
     * term_symbol: terminal string symbol

    given a LHS (string), randomly expand until all terminal values reached.
    output:     
    string containing all terminals as traversed Left-searched
    string tree if disp_tree==True
    
    '''
    curr_RHS=rule_select(LHS,rule_dictionary,weight_dictionary,term_symbol)
    if curr_RHS==term_symbol: 
        if disp_tree:
            return ''
        else:
            return LHS+' ' 				# this is a terminal string
    next_LHS_list=curr_RHS[0]
    substr=''
    
    for LHS_candidate in next_LHS_list:

        cont_str=rule_expantion_step(LHS_candidate,rule_dictionary,weight_dictionary,disp_tree,term_symbol)
        if disp_tree:
            if not(isterminal(LHS_candidate,rule_dictionary,weight_dictionary,term_symbol)):
                substr=substr+'('+LHS_candidate+' '+cont_str+')'
            else:
                substr=substr+LHS_candidate+' '+cont_str
        else:
            substr=substr+cont_str

    
    return substr


def rule_expantion(rule_dictionary,weight_dictionary,disp_tree=False,term_symbol=None):
    '''
    inputs:
     * rule_dictionary: dictionary of the form {LHS:[RHS1,RHS2,...]} 
       where LHS is a unique string key corresponding to the left hand side 
       of a rule as defined in the grammar file.
     * weight_dictionary: dictionary of the same structure {LHS:[weight RHS1, weight RHS2,...]}
     * disp_tree: bool, if true output tree string
     * term_symbol: terminal string symbol
    
    starting at 'START' randomly expand until all terminal values reached.
    output:     
    string containing all terminals as traversed Left-searched
    string tree if disp_tree==True
    '''
    if disp_tree:
        fullstr='(START '+rule_expantion_step('START',rule_dictionary,weight_dictionary,disp_tree,term_symbol)+')'
    else:
        fullstr=rule_expantion_step('START',rule_dictionary,weight_dictionary,disp_tree,term_symbol)
    return fullstr
   
#########################################
### read grammar. #######################
#########################################

# grammer is represented by two (Python) dictionaries (see comments in function header)
rule_dic,weight_dic=read_grammar(args.grammar)


#########################################
### iterate generation ##################
#########################################

for iter in range(args.count):
    print (rule_expantion(rule_dic,weight_dic,args.tree))




